---
layout: post
title:  "Raspberry Pi 4 Temperature and Humdity Sensor(DHT11) using Grove Pi+."
date:   2019-09-11 17:31:21 +0300
categories: jekyll update
---

# Prior Knowledge before we start

## SQL vs NOSQL

SQL is a relational database which defines relationships in form of tables.

NoSQL (created in 1998)  is a non relational database which is easy to scale. NoSQL is used for big data and real time web apps. Used for documents, Graph databases or wide column stores.

SQL uses SQL language for defining and manipulating data, NoSQL uses Unstructured Query language (UnQL).

[![SQLvs-No-SQL.jpg](https://i.postimg.cc/j2GwpXwv/SQLvs-No-SQL.jpg)](https://postimg.cc/JH5zJjQB)

SQL databases are better for complex queries.

SQL databases can manage increasing load by increasing CPU, RAM, SSD since they were designed to run on a single server whereas NoSQL just adds more servers to the infrastructure, which makes them the preferred method when dealing with large or constantly increasing data sets.

NoSQL databases are quickly becoming a major part of the database landscape today.

NoSQL has many ways for implementation, making it more diverse than SQL which has standartised implementation techniques. This makes NoSQL’s performance for reading and writing better than normal SQL.



https://www.softwaretestinghelp.com/sql-vs-nosql/







# DOCKER


Docker is a bit like a virtual machine. But unlike a virtual machine, rather than creating a whole virtual operating system, Docker allows applications to use the same Linux kernel as the system that they're running on. This gives a significant performance boost and reduces the size of the application.

[![linux-containers.png](https://i.postimg.cc/0N2YdVpJ/linux-containers.png)](https://postimg.cc/ZW2vJFsT)


# InfluxDB

InfluxDB is a time series database (TSDB) is a database optimized for time-stamped or time series data. Time series data are simply measurements or events, such as performance, network, click monitoring as well as sensor data that are tracked, monitored over time. Time series is the fastest growing database category in today’s standards.

Grafana is one of the most popular time series data visualization tools.

Legacy system refers to outdated computer systems, programming languages or app software that are used instead of available upgraded versions.

# DHT11

# Raspberry Pi 4 Temperature and Humdity Sensor(DHT11) using Grove Pi+.

In this project, we are using Grove Pi with our RasPi to sensor the tempereture and humidity of the room we are in, store that data in a database using InfluxDB and monitor it with Grafana.

The system we are going to build:

[![raspisema-768x1024.jpg](https://i.postimg.cc/sX98j9Tz/raspisema-768x1024.jpg)](https://postimg.cc/tZJDDP0v)

[![LED-blink-connected.jpg](https://i.postimg.cc/ZKRdCWxJ/LED-blink-connected.jpg)](https://postimg.cc/ThzwsYss)

# Prequisites

- Raspberry Pi 4

- Grove Pi board

- DHT11 sensor module

First connect raspi into the board.

Then connect the module to the boards D4 port.( for this project.)

We are now good to go. Go into your raspi screen and start the configuration.

# First Download Grove Pi:

```curl -kL dexterindustries.com/update_grovepi | bash```

```sudo reboot```

```cd /home/pi/Desktop```


# Inside Grove Pi folder:

```cd Firmware```

```bash firmware_update.sh```

Firmware update is necessary for raspi to see the grovepi connection.

```sudo i2cdetect -y 1```

(you need to see 04 here)
```
    0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f
00:          -- 04 -- -- -- -- -- -- -- -- -- -- -- 
10: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
20: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
30: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
40: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
50: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
60: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
70: -- -- -- -- -- -- -- -- 
```

# Docker installation/config for Ubuntu 18.04 Server 

```sudo apt-get update```

```sudo apt install docker.io```

```sudo systemctl start docker```

```sudo docker ps ```(for current working containers.)

```sudo docker ps -a``` (print all containers.)

# InfluxDB container with specific version

```sudo docker pull influxdb:1.0```

```docker run --rm influxdb:1.0 influxd config > influxdb.conf```

```sudo docker run -d -p 8083:8083 -p 8086:8086 -p 25826:25826/udp -v $PWD/influxdb:/var/lib/influxdb -v $PWD/influxdb.conf:/home/pi/influxdb.conf:ro influxdb:1.0 ```

This runs influxDB with Admin and HTTP API ports attached to it. (/var/lib/influxdb is for storing the data, the other is for the conf files.)

for some cases remove :ro

# For the latest InfluxDB

```sudo docker pull influxdb```

```sudo docker run -d -p 8083:8083 -p 8086:8086 -p influxdb ```

Running without '-d':

[![photo6014972578902421475.jpg](https://i.postimg.cc/BvNJDmSz/photo6014972578902421475.jpg)](https://postimg.cc/JyDwCcB3)


'-d' option makes the container run in the background.

to stop the container:

```docker stop 'container ID' ```
(first 3-4 digits of the ID should be sufficient.)

``` curl -i -XPOST 'http://35.198.129.164:8086/write?db=mydb' --data-binary @data.txt ```

(sends the data through the InfluxDB API.)


# Grafana

```docker pull grafana/grafana```

```docker run -d --name=grafana -p 3000:3000 grafana/grafana ```(run grafana with port 3000 attached to it.)

(--name is optional, can run into problems if you stop and restart the container. Suggested to not include.)

# Running the project

Start the containers using the run commands above.

Either create relationless database in influxdb manually or through the API using:

```curl -G http://35.198.129.164:8086/query --data-urlencode "q=CREATE DATABASE mydb"```

If you can connect to 35.198.129.164:8083 and 35.198.129.164:3000 you can proceed to sending the Raspberry Pi data.

Clone the bash.sh and bash.py files into the same directory.

Make sure bash.sh has execute priviledge you can check this using:

```ls -l bash.sh```

You can give execute access with

```chmod +x bash.py ```

Run the file 

```./bash.sh ```

check database for sent data and grafana graph.

InfluxDB after the execution of raspi file:

[![photo6014972578902421476.jpg](https://i.postimg.cc/ZRGYKCKY/photo6014972578902421476.jpg)](https://postimg.cc/k6yPTMbL)


Grafana after the execution:

[![grafana.png](https://i.postimg.cc/cCRYBqvW/grafana.png)](https://postimg.cc/gL0nGTyt)

# Notes for myself

Influxdb database schema consists of:

```
+-----------+--------+-+---------+-+---------+
|measurement|,tag_set| |field_set| |timestamp|
+-----------+--------+-+---------+-+---------+
```

- If the data is seperated with ',' instead of space it follows the measurement and tagkey format, make sure you fill them carefully. 

- Field key is the data you want to send. Seperate it with a space. Timestamp is optional if left empty it will fill with system time.

- Make sure you have the correct containers running in the background.

- Ports are important, check their availability.

- Docker-compose runs influxdb:1.0, there are issues with latest version.

- Run docker-compose up -d in the same directory as docker-compose.yml file or it won't work


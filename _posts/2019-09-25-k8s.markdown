---
layout: post
title:  "Kubernetes"
date:   2019-09-19 11:31:21 +0300
categories: jekyll update
---

Kubernetes also known as k8s is an open source management system for containerized applications in a clustered environment created by Google.


The unit of execution that Kubernetes works with is the pod. A pod is a collection of containers that share some resources: they have a single IP, and can share volumes. For example, a web server pod could have a container for the server itself, and a container that tails the logs and ships them off to your logging or metrics infrastructure.

At its base, Kubernetes brings together individual physical or virtual machines into a cluster using a shared network to communicate between each server. This cluster is the physical platform where all Kubernetes components, capabilities, and workloads are configured.

The master server in this ecosystem is important since it is the default platform to orchestrate the workload across the nodes.


A node is the other machine in the cluster which is responsible for running workloads. Kubernetes runs apps in containers so each node needs to have a container runtime like Docker configured. The node receives work instructions from the master server and creates or destroys containers accordingly.

Users interact with the cluster by the main API server directly or through clients with libraries. The commands are submitted in JSON or YAML files.

# Master Server Components

The master server acts as a primary control node for Kubernetes clusters.

## etcd


Kubernetes uses etcd as how an application uses a database. Configuration data, state, and metadata are stored in etcd, but Kubernetes is a distributed system that runs on one master and several worker nodes so etcd is a distributed database. 	

Whenever we run `kubectl get deployments` it gets the data from etcd.

etcd is a key-value database just like a NOSQL database but the similarities stop there.

etcd does not have various data types. It is made to store only kubernetes objects. But redis and other key-value stores have data-type flexibility.

Since all the cluster data is stored in etcd, it is important to always have a backup plan to restore it in case of emergency.
[![etcd-diagram.png](https://i.postimg.cc/Wbpjnx35/etcd-diagram.png)](https://postimg.cc/5jrZ978z)

## kube-apiserver

This is the main management point of the entire cluster as it allows a user to configure Kubernetes’ workloads and organizational units. A client called kubectl is available as a default method of interacting with the Kubernetes cluster from a local computer.

## kube-controller-manager

Controller manager manages different controllers that regulate the state of the cluster, manage workload life cycles, and perform routine tasks. When a change is seen, the controller reads the new information and implements the procedure that fulfills the desired state.


## kube-scheduler

Scheduler is the actual component that assigns workloads to the nodes in the cluster. 

Once a pod is created, the scheduler notices that the pod isn’t assigned to a node and it assings the posd to an available node. Scheduler doesn’t run the pod. The scheduler is also responsible of tracking available capacity on each node and makes sure they aren’t scheduled above their available resources.

[![0-r3-Dy-Rv-MZJ-LUC9w4.png](https://i.postimg.cc/HnxZJ0Y9/0-r3-Dy-Rv-MZJ-LUC9w4.png)](https://postimg.cc/0MTdFwJz)

# Node Server Components

## A Container Runtime

The first component is a container runtime. A container runtime is software that executes containers and manages container images on a node. This requirement is satisfied by Docker or rkt.

##kubelet

The kubelet is the primary “node agent” that runs on each node.  Kubelet works with Pod Specs. A pod spec is a YAML or JSON object that describes a pod. Kubelet makes sure the pod specs are running and healthy.

## kube-proxy

Kube-proxy is one of the most important node components that participates in managing Pod-to-Service and External-to-Service networking. The difference between the kube-proxy and a normal reverse proxy is that the kube-proxy proxies requests to Kubernetes Services and their backend Pods, not hosts.


# Kubernetes Objects and Workloads


Instead of managing containers directly, users interact with Kubernetes objects.


## Pods

A Kubernetes pod is a or  group of containers that are deployed together on the same host.
Pods are useful because containers in the same pod share their lifecycle and storage resources. 


## Replication Controllers and Replication Sets

When working with Kubernetes we mostly will be working with more than one pod. A replication controller is an object that creates identical replicas of pods horizontally by increasing or decreasing the number of copies. It also makes sure the number of pods deployed match the number of pods declared in the configuration.

Replication set is the advanced version of the controller which is beginning to replace the controller over time with easier management of the pods to be managed.

## Deployments

Deployments are one of the most common workloads to directly create and manage. 

Deployments are intended to replace Replication Controllers.  They provide the same replication functions (through Replica Sets) and also the ability to rollout changes and roll them back if necessary.

Everyone running applications on Kubernetes cluster uses a deployment. 
It’s what we use to scale, roll out, and roll back versions of our applications.
With a deployment, we tell Kubernetes how many copies of a Pod we want running. The deployment takes care of everything else.

An example of the deployment.yaml file:

```
apiVersion: apps/v1
kind: Deployment
metadata:
  name: django
  labels:
    deployment: django
spec:
  replicas: 1
  selector:
    matchLabels:
      pod: django
  template:
    metadata:
      labels:
        pod: django
    spec:
      containers:
        - name: django
          image: gitumarkk/k8_django_minikube:part_4
          ports:
            - containerPort: 8000
          env:
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: postgres-credentials
                  key: user

            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-credentials
                  key: password

            - name: POSTGRES_HOST
              value: postgres-service

            - name: REDIS_HOST
              value: redis-service
```

Let's take a look at the components used in the file.
## apiVersion
Defines the API version of the deployment object. There are three versions of APIs.

### Alpha:

This is the early release candidate. It might contain bugs and there is no guarantee that it will work in the future. Example: scalingpolicy.kope.io/v1alpha1
### Beta:

 The API’s become beta once its alpha tested. It will be in continuous development & testing until it becomes stable. Beta versions will most likely go into the Kubernetes main APIs. Example: batch/v1beta1
### Stable: 
The APIs which does not contain alpha and beta goes into the stable category. Only stable versions are recommended to be used in production systems. Example: apps/v1

## Kind
Kind describes the type of the object/resource to be created.

## Metadata 
Metadata is a set of data to uniquely identify a Kubernetes object.

Types of metadata are as follows:

labels: Key-value pairs primarily used to group and categorize deployment object.

name: Represents the name of the deployment to be created.

namespace: Name of the namespace where you want to create the deployment.

annotations:  key-value pairs like labels, however, used for different use cases.


## spec
 It is where we define the actual desired behavior of the Kubernetes Deployment. 

### Template 
Template is a required object that describes the Pods Kubernetes should create as part of the deployment. 

Inside template, spec will have all the container information a pod should have.

## Services

A service is used to allow network access to a set of pods.
An example of service.yaml:

## replicas 

Increasing the number of replicas will result in more than one pod running the same application. The server will load balance itself and redirections will occur on a regular basis.
[![Screenshot-from-2019-09-26-10-21-13.png](https://i.postimg.cc/Wb7gRygF/Screenshot-from-2019-09-26-10-21-13.png)](https://postimg.cc/hfffTpCc)

## selector

Selectors are defined to tell the deployment to manage any kind of application with that name.

```
kind: Service
apiVersion: v1
metadata:
  name: django-service
spec:
  selector:
    pod: django
  ports:
  - protocol: TCP
    port: 8000
    targetPort: 8000
  type: NodePort


```

### type

## Cluster IP 

A ClusterIP service is the default Kubernetes service. It gives you a service inside your cluster that other apps inside your cluster can access. There is no external access. But you can access the internet using the Kubernetes proxy.

[![1-D7-F7733-BE79-4408-919-C-C9-D8-F8-AF3-A9-E.jpg](https://i.postimg.cc/KzynL3Mw/1-D7-F7733-BE79-4408-919-C-C9-D8-F8-AF3-A9-E.jpg)](https://postimg.cc/bG3DfJL9)

## NodePort

A NodePort service is the most primitive way to get external traffic directly to your service. NodePort, as the name implies, opens a specific port on all the Nodes (the VMs), and any traffic that is sent to this port is forwarded to the service. But you can only one service per port and only 3000-32767 can be used as ports.

[![BDFD96-AE-11-F9-4079-B375-250-FA40-B7-CE9.jpg](https://i.postimg.cc/Y9sMZYzy/BDFD96-AE-11-F9-4079-B375-250-FA40-B7-CE9.jpg)](https://postimg.cc/ftmG03Fx)

## Load Balancer
Declaring a Service as LoadBalancer exposes it externally, using a cloud provider’s load balancer solution. The cloud provider will provision a load balancer for the Service, and map it to its automatically assigned NodePort. This is the most widely used method in production environments.

[![81-CC04-AA-9585-4-FCD-A53-C-1-C1-CACDCBAB4.jpg](https://i.postimg.cc/9X9QKgsd/81-CC04-AA-9585-4-FCD-A53-C-1-C1-CACDCBAB4.jpg)](https://postimg.cc/7bx4T9Hh)

## Ingress

Ingress is the most useful if you want to expose multiple services under the same IP address, and these services all use the same L7 protocol (typically HTTP). There are many types of Ingress controllers, from the Google Cloud Load Balancer, Nginx, Contour, Istio, and more. 

[![AF5-F301-F-ADDE-4-ED7-9-B80-4-E2-BA51-DA6-DB.png](https://i.postimg.cc/c1BVvQ3q/AF5-F301-F-ADDE-4-ED7-9-B80-4-E2-BA51-DA6-DB.png)](https://postimg.cc/XXX2hBxx)


[![service-vs-deployment.png](https://i.postimg.cc/c437Fkb8/service-vs-deployment.png)](https://postimg.cc/7fxT69Dx)




## Jobs

A Job creates a pod which runs a single task to completion.




### Resources: 

https://matthewpalmer.net/kubernetes-app-developer/articles/how-does-kubernetes-use-etcd.html

https://www.digitalocean.com/community/tutorials/an-introduction-to-kubernetes

[https://medium.com/faun/the-description-of-the-kubernetes-deployment-fields-7dc942237a73](https://medium.com/faun/the-description-of-the-kubernetes-deployment-fields-7dc942237a73)

[https://kubernetes.io/docs/concepts/services-networking/service/#nodeport](https://kubernetes.io/docs/concepts/services-networking/service/#nodeport)
